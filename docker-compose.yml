version: "3"

services:
  nginx:
    image: nginx
    container_name: nginx_chat_orig
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

    #networks:
    #  - botnet
    ports:
      - "80:80"
      - "443:443"
#      - 8000:8000
#      - 8200:8200
#      - 8300:8300
    volumes:
      - ./nginx_abuse/abuse:/src  
      - ./rel_kids/:/src2
      - ./ButonBotDjango/ButonBotDjango:/src3
      - ./data/nginx:/etc/nginx/conf.d
      - ./ButonBotDjango/logs:/logs
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      # - /var/www/httpd-cert/www-root:/etc/ssl        
    depends_on:
      - web3
      - web2
      - web1


  bot:
    build:
      context: .
      dockerfile: ButonBotDjango/compose/django/Dockerfile
    container_name: telegram-bot_orig
    restart: always
    #    networks:
    #      - botnet
    volumes:
      - ./ButonBotDjango/ButonBotDjango:/src3
    expose:
      - 8300
    command: sh -c
      "echo hello world && python3 help_bot/telega.py"

  web3:
    build:
      context: .
      dockerfile: ./ButonBotDjango/compose/django/Dockerfile
    container_name: chatbot
    restart: always
    volumes:
      - ./ButonBotDjango/ButonBotDjango:/src3
    #    networks:
    #      - botnet
    #    expose:
    #      - "8000"
    #      command: sh -c
    #        "python3 manage.py makemigrations && python3 manage.py migrate && gunicorn config.wsgi -b 0.0.0.0:8000"
    # new
    ports:
      - 8000:80
    # new
    command: bash -c
      "python3 manage.py migrate
      && python3 manage.py runserver 0.0.0.0:8000"

  web1:

    build:
      context: .
      dockerfile: ./nginx_abuse/Dockerfile
    container_name: abuse
    volumes:
      - ./nginx_abuse/abuse:/src
    ports:
      - 8200:80
    tty: true    
    command: python3 manage.py runserver 0.0.0.0:8200


  web2:
    build:
      context: .
      dockerfile: ./rel_kids/Dockerfile
    container_name: pomogutkids
    volumes:
      - ./rel_kids:/src2
    ports:
      - 8400:80
    tty: true    
    command: python3 manage.py runserver 0.0.0.0:8400

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbo
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


networks:
  botnet:
    driver: bridge
    driver_opts:
      "com.docker.network.bridge.enable_icc": "true"
      "com.docker.network.bridge.enable_ip_masquerade": "true"
      "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0"
      "com.docker.network.bridge.name": "br0"
      "com.docker.network.driver.mtu": "1500"

