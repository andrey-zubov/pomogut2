# Generated by Django 3.0.7 on 2020-06-14 08:11

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChatBotIframe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iframe_code_name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('iframe_code', models.TextField(blank=True, default='', max_length=5000, null=True)),
            ],
            options={
                'verbose_name': 'Код для вставки на сайт',
                'verbose_name_plural': 'Код для вставки на сайт',
            },
        ),
        migrations.CreateModel(
            name='ChatPositionTelegram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_id', models.PositiveIntegerField(default=0)),
                ('position', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ChatPositionWeb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('position', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='EditionButtons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('btn_name', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Название кнопки')),
                ('btn_active', models.BooleanField(blank=True, default=False, null=True, verbose_name='Кнопка активна')),
                ('btn_position_start', models.BooleanField(blank=True, default=False, help_text='да/нет', null=True, verbose_name='В начале списка кнопок чата')),
                ('btn_position_end', models.BooleanField(blank=True, default=False, help_text='да/нет', null=True, verbose_name='В конце списка кнопок чата')),
            ],
            options={
                'verbose_name': 'Дополнительная кнопка чата',
                'verbose_name_plural': 'Дополнительные кнопки чата',
            },
        ),
        migrations.CreateModel(
            name='StartMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, verbose_name='Название текста')),
                ('text', models.TextField(default='', max_length=1000, verbose_name='Текст сообщения')),
                ('hello_text', models.BooleanField(blank=True, default=False, help_text='Только одно сообщение-приветствие может быть активным,<br>т.к. отправляется пользователю при старте чата.', null=True, verbose_name='Текст приветствия по умолчанию')),
                ('sorry_text', models.BooleanField(blank=True, default=False, help_text='Только одно сообщение-ошибка может быть активным,<br>т.к. отправляется пользователю при неправильном вводе.', null=True, verbose_name='Текст об ошибке')),
            ],
            options={
                'verbose_name': 'Стартовое сообщение бота',
                'verbose_name_plural': 'Стартовое сообщение бота',
            },
        ),
        migrations.CreateModel(
            name='StatisticAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_point', models.DateField(auto_now=True)),
                ('web_chat_count', models.PositiveIntegerField(default=0)),
                ('telegram_chat_count', models.PositiveIntegerField(default=0)),
                ('site_open', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Статистика чат-бота',
                'verbose_name_plural': 'Статистика чат-бота',
            },
        ),
        migrations.CreateModel(
            name='StatisticTelegram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Колличество')),
            ],
        ),
        migrations.CreateModel(
            name='StatisticWeb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Колличество')),
            ],
        ),
        migrations.CreateModel(
            name='TelegramBot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Название')),
                ('token', models.CharField(blank=True, max_length=100, null=True)),
                ('web_hook', models.CharField(blank=True, max_length=200, null=True)),
                ('in_work', models.BooleanField(default=False, help_text='Только ОДИН telegram bot может быть выбран как основной для работы.', verbose_name='Является основным')),
            ],
            options={
                'verbose_name': 'Телеграм бот',
                'verbose_name_plural': 'Телеграм боты',
            },
        ),
        migrations.CreateModel(
            name='NeedHelp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Удобочитаемое имя для родителя.', max_length=100, verbose_name='Название')),
                ('user_input', models.CharField(default='', help_text='Название кнопки, которое отправится в чат.', max_length=100, verbose_name='Название кнопки')),
                ('go_back', models.BooleanField(blank=True, default=False, help_text='«ДА» - вернуть пользователя к стартовым вопросам.', null=True, verbose_name='Возврат в меню')),
                ('question', models.CharField(blank=True, default='', help_text='Помощь для администратора при заполнении.<br>Указать, если вопрос есть в тексте бота.', max_length=100, null=True, verbose_name='Вопрос пользователю')),
                ('go_default', models.BooleanField(blank=True, default=False, help_text='Является ли этот элемент последним для этой ветки дерева.', null=True, verbose_name='Последний элемент ветки?')),
                ('is_default', models.BooleanField(blank=True, default=False, help_text='Вспомогательная ветка для последних элементов всего дерева.', null=True, verbose_name='Элемент по умолчанию')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('link_to', models.ForeignKey(blank=True, default=None, help_text='Если эта кнопка является ссылкой на другой элемент дерева - указать этот элемент.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='help_bot.NeedHelp', verbose_name='Ссылка на элемент')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Кто родитель этого элемента.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='help_bot.NeedHelp', verbose_name='Родитель')),
                ('statistic_telegram', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='help_bot.StatisticTelegram', verbose_name='')),
                ('statistic_web', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='help_bot.StatisticWeb', verbose_name='')),
            ],
            options={
                'verbose_name': 'Дерево диалога',
                'verbose_name_plural': 'Дерево диалога',
            },
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='Помощь для администратора при заполнении.', max_length=100, null=True, verbose_name='Назкание текста бота')),
                ('text', models.TextField(blank=True, default='', help_text='Текст сообщения бота для отправки в чат.<br>Пример номера телефона: 8 (017) 123-45-67 или +375 (12) 123-45-67', max_length=2000, null=True, verbose_name='Текст сообщения')),
                ('geo_link_name', models.CharField(blank=True, help_text='пример: ТЦСОН (необходимо только краткое сокращение).<br>Обязательно для создания гео-ссылки в web-чате - увеличивает точность!', max_length=100, null=True, verbose_name='Имя для гео-ссылки')),
                ('address', models.CharField(blank=True, help_text='пример: г. Лида, ул. Варшавская, 9.<br>Обязательно для создания гео-ссылки в web-чате!', max_length=100, null=True, verbose_name='Адрес')),
                ('latitude', models.FloatField(blank=True, help_text='Широты РБ от 51.258872 до 56.171949.<br>Обязательно для создания гео-ссылки в web-чате - увеличивает точность!', null=True, verbose_name='Широта')),
                ('longitude', models.FloatField(blank=True, help_text='Долгота РБ от 23.176563 до 32.779784.<br>Обязательно для создания гео-ссылки в web-чате - увеличивает точность!', null=True, verbose_name='Долгота')),
                ('telegram_geo_url', models.URLField(blank=True, help_text='<b>Только для Телеграма!!! Максимум 500 символов.</b><br>Обязательно для создания гео-ссылки в Телеграм-чате!', max_length=500, null=True, verbose_name='Ссылка на объект на карте')),
                ('relation_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='help_bot.NeedHelp', verbose_name='Относится к элементу дерева')),
            ],
            options={
                'verbose_name': 'Текст сообщения бота',
                'verbose_name_plural': 'Тексты сообщений бота',
            },
        ),
    ]
