# Generated by Django 3.0 on 2020-09-25 17:32

from django.db import migrations, models
import django.db.models.deletion
import feincms.contrib.richtext
import feincms.extensions.base
import feincms.extensions.datepublisher
import feincms.module.medialibrary.fields
import feincms.module.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('medialibrary', '0001_initial'),
        ('cms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('title', models.CharField(help_text='This title is also used for navigation menu items.', max_length=200, verbose_name='title')),
                ('slug', models.SlugField(help_text='This is used to build the URL for this page', max_length=150, verbose_name='slug')),
                ('in_navigation', models.BooleanField(default=False, verbose_name='in navigation')),
                ('override_url', models.CharField(blank=True, help_text="Override the target URL. Be sure to include slashes at the beginning and at the end if it is a local URL. This affects both the navigation and subpages' URLs.", max_length=255, verbose_name='override URL')),
                ('redirect_to', models.CharField(blank=True, help_text='Target URL for automatic redirects or the primary key of a page.', max_length=255, verbose_name='redirect to')),
                ('_cached_url', models.CharField(blank=True, db_index=True, default='', editable=False, max_length=255, verbose_name='Cached URL')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('publication_date', models.DateTimeField(default=feincms.extensions.datepublisher.granular_now, verbose_name='publication date')),
                ('publication_end_date', models.DateTimeField(blank=True, help_text='Leave empty if the entry should stay active forever.', null=True, verbose_name='publication end date')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('en', 'English')], default='ru', max_length=10, verbose_name='language')),
                ('template_key', models.CharField(choices=[('widgets/news_widget.html', 'Новость'), ('widgets/refactor_art.html', 'Отдельная статья')], default='widgets/news_widget.html', max_length=255, verbose_name='template')),
                ('test_category', models.CharField(choices=[('no', 'Без располажение в header-е'), ('down', 'Нижний header'), ('up', 'Верхний header')], max_length=64)),
                ('show_help', models.BooleanField(default=False, verbose_name='Отображать "первая помощь')),
                ('source', models.CharField(blank=True, max_length=256, null=True, verbose_name='Ссылка на источник')),
                ('cross_link', models.ManyToManyField(blank=True, to='page.Page', verbose_name='Ссылки на страницы в левом сайд-баре')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='page.Page', verbose_name='Parent')),
                ('preview_img', feincms.module.medialibrary.fields.MediaFileForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medialibrary.MediaFile', verbose_name='Выбрать картинку')),
                ('translation_of', models.ForeignKey(blank=True, help_text='Leave this empty for entries in the primary language.', limit_choices_to={'language': 'ru'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='page.Page', verbose_name='translation of')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
                'ordering': ['tree_id', 'lft'],
            },
            bases=(models.Model, feincms.extensions.base.ExtensionsMixin, feincms.module.mixins.ContentModelMixin),
        ),
        migrations.CreateModel(
            name='StandartArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(max_length=256, verbose_name='Заголовок')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст')),
                ('list', models.TextField(blank=True, help_text='<li><p>Текст пункта списка</p></li>', null=True, verbose_name='Список')),
                ('org_button', models.BooleanField(verbose_name='Ссылка на ближайшие организации')),
                ('link', models.ManyToManyField(blank=True, null=True, to='cms.Link', verbose_name='Добавить ссылку')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standartarticle_set', to='page.Page')),
                ('picture', feincms.module.medialibrary.fields.MediaFileForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medialibrary.MediaFile', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'standart article',
                'verbose_name_plural': 'standart articles',
                'db_table': 'page_page_standartarticle',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RichTextContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('text', feincms.contrib.richtext.RichTextField(blank=True, verbose_name='text')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='richtextcontent_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'rich text',
                'verbose_name_plural': 'rich texts',
                'db_table': 'page_page_richtextcontent',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuizWidget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='Заголовок блока')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текстовая информация')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizwidget_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'quiz widget',
                'verbose_name_plural': 'quiz widgets',
                'db_table': 'page_page_quizwidget',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantWidget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(max_length=256, verbose_name='заголовок')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participantwidget_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'participant widget',
                'verbose_name_plural': 'participant widgets',
                'db_table': 'page_page_participantwidget',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrgSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orgsection_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'org section',
                'verbose_name_plural': 'org sections',
                'db_table': 'page_page_orgsection',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedbackSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacksection_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'feedback section',
                'verbose_name_plural': 'feedback sections',
                'db_table': 'page_page_feedbacksection',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmploymentArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(max_length=256, verbose_name='заголовок')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст')),
                ('list', models.TextField(blank=True, help_text='<li><p>Текст пункта</p></li>', null=True, verbose_name='Список')),
                ('link', models.ManyToManyField(blank=True, null=True, to='cms.Link', verbose_name='Добавить ссылку')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employmentarticle_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'employment article',
                'verbose_name_plural': 'employment articles',
                'db_table': 'page_page_employmentarticle',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalendarArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(max_length=256, verbose_name='Заголовок')),
                ('text', models.TextField()),
                ('list', models.TextField(default='<li></li>')),
                ('bank_link', models.CharField(blank=True, max_length=256, null=True, verbose_name='Ссылка на банк вакансий')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendararticle_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'calendar article',
                'verbose_name_plural': 'calendar articles',
                'db_table': 'page_page_calendararticle',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticlePicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articlepicture_set', to='page.Page')),
                ('picture', feincms.module.medialibrary.fields.MediaFileForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medialibrary.MediaFile', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'article picture',
                'verbose_name_plural': 'article pictures',
                'db_table': 'page_page_articlepicture',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccordeonArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('title', models.CharField(blank=True, max_length=256, null=True)),
                ('text', models.TextField(blank=True, help_text='в формате <p>Текст пункта</p>', null=True)),
                ('link', models.ManyToManyField(blank=True, null=True, to='cms.Link', verbose_name='Добавить ссылку')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accordeonarticle_set', to='page.Page')),
            ],
            options={
                'verbose_name': 'accordeon article',
                'verbose_name_plural': 'accordeon articles',
                'db_table': 'page_page_accordeonarticle',
                'ordering': ['ordering'],
                'permissions': [],
                'abstract': False,
            },
        ),
    ]
